{"ast":null,"code":"var _jsxFileName = \"/home/shashank/This/Projects and Attempts/React/cloudbook/src/context/notes/NoteState.js\",\n  _s = $RefreshSig$();\nimport NoteContext from \"./NoteContext\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"http://localhost:5000\";\n  const noteInitial = [];\n  const [notes, setNotes] = useState(noteInitial);\n  const getNote = async () => {\n    //API Call\n    const response = await fetch(`${host}/note/fetchnote`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n    setNotes(json);\n  };\n\n  //Add Note\n  const addNote = async (title, description, tag) => {\n    //API Call\n    const response = await fetch(`${host}/note/createnote`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n    const note = await response.json();\n    setNotes(notes.concat(note));\n  };\n\n  //Update Note\n  const updateNote = async (title, description, tag, id) => {\n    //API Call\n    const response = await fetch(`${host}/note/updatenote/${id}`, {\n      method: \"PUT\",\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n    console.log(response.status);\n    const newNotes = JSON.parse(JSON.stringify(notes));\n    //Logic to edit the note\n    for (let index = 0; index < newNotes.length; index++) {\n      const element = newNotes[index];\n      if (element._id === id) {\n        newNotes[index].title = title;\n        newNotes[index].description = description;\n        newNotes[index].tag = tag;\n        break;\n      }\n    }\n    setNotes(newNotes);\n  };\n\n  //Delete Note\n  const deleteNote = async id => {\n    var _response$headers$get;\n    const response = await fetch(`${host}/note/deletenote/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n    let json = null;\n    if ((_response$headers$get = response.headers.get(\"Content-Type\")) !== null && _response$headers$get !== void 0 && _response$headers$get.includes(\"application/json\")) {\n      // eslint-disable-next-line\n      json = await response.json();\n    }\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n      value: {\n        notes,\n        addNote,\n        updateNote,\n        deleteNote,\n        getNote\n      },\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(NoteState, \"vS+yqGJfAcVJ8XYDTXAd5OCG4B0=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["NoteContext","React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","NoteState","props","_s","host","noteInitial","notes","setNotes","getNote","response","fetch","method","headers","localStorage","getItem","json","console","log","addNote","title","description","tag","body","JSON","stringify","note","concat","updateNote","id","status","newNotes","parse","index","length","element","_id","deleteNote","_response$headers$get","get","includes","filter","children","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/shashank/This/Projects and Attempts/React/cloudbook/src/context/notes/NoteState.js"],"sourcesContent":["import NoteContext from \"./NoteContext\";\nimport React, { useState } from \"react\";\n\nconst NoteState = (props) => {\n  const host = \"http://localhost:5000\";\n  const noteInitial = [];\n  const [notes, setNotes] = useState(noteInitial);\n\n  const getNote = async () => {\n    //API Call\n    const response = await fetch(`${host}/note/fetchnote`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\":localStorage.getItem('token'),\n      },\n    });\n    const json = await response.json()\n    console.log(json)\n    setNotes(json)\n  };\n\n  //Add Note\n  const addNote = async (title, description, tag) => {\n    //API Call\n    const response = await fetch(`${host}/note/createnote`, {\n      method: \"POST\",\n      body: JSON.stringify({ title, description, tag }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\":localStorage.getItem('token'),\n      },\n    });\n    const note = await response.json();\n    setNotes(notes.concat(note));\n  };\n\n  //Update Note\n  const updateNote = async (title, description, tag, id) => {\n    //API Call\n    const response = await fetch(`${host}/note/updatenote/${id}`, {\n      method: \"PUT\",\n      body: JSON.stringify({ title, description, tag }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\":localStorage.getItem('token'),\n      },\n    });\n    console.log(response.status);\n\n    const newNotes = JSON.parse(JSON.stringify(notes))\n    //Logic to edit the note\n    for (let index = 0; index < newNotes.length; index++) {\n      const element = newNotes[index];\n      if (element._id === id) {\n        newNotes[index].title = title;\n        newNotes[index].description = description;\n        newNotes[index].tag = tag;\n        break;\n      }\n    }\n    setNotes(newNotes);\n  };\n\n  //Delete Note\n  const deleteNote = async (id) => {\n    const response = await fetch(`${host}/note/deletenote/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\":localStorage.getItem('token'),\n      }\n    });\n    let json = null;\n    if(response.headers.get(\"Content-Type\")?.includes(\"application/json\")){\n      // eslint-disable-next-line\n      json = await response.json()\n    }\n    const newNotes = notes.filter((note) => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  };\n\n  return (\n    <>\n      <NoteContext.Provider value={{ notes, addNote, updateNote, deleteNote,getNote }}>\n        {props.children}\n      </NoteContext.Provider>\n    </>\n  );\n};\n\nexport default NoteState;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}